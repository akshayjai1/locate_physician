{"ast":null,"code":"import _classCallCheck from \"/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport Select from 'react-select';\nimport axios from 'axios';\nvar options = [];\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.handleChange = function (selectedOption) {\n      _this.getCoordinate(selectedOption.address);\n\n      _this.setState({\n        selectedOption: selectedOption\n      }); //console.log(`Option selected:`, selectedOption);\n\n    };\n\n    _this.state = {\n      selectedOption: null,\n      isLoaded: false,\n      autocompleteSuggestion: [],\n      lat: 48.407326,\n      long: -123.329773,\n      idx: 0\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"getCoordinate\",\n    value: function getCoordinate(address) {\n      var _this2 = this;\n\n      var url = 'https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyDMQNXNqvLcdx4rEhOsSX5YCRyzCUAuDaI&address=' + address;\n      axios.get(url).then(function (res) {\n        if (res.data.results[0].geometry.location.lat != undefined) {\n          console.log(address);\n          console.log(res.data.results[0].geometry.location.lat);\n          console.log(res.data.results[0].geometry.location.lng);\n\n          _this2.setState({\n            lat: res.data.results[0].geometry.location.lat,\n            long: res.data.results[0].geometry.location.lng\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      fetch('/api/').then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        var physician_names = [];\n        json.map(function (item, i) {\n          if (item.Physician_First_Name != \"Physician_First_Name\") {\n            var full_name = item.Physician_First_Name + \" \" + item.Physician_Middle_Name + \" \" + item.Physician_Last_Name;\n            var address = item.Recipient_Primary_Business_Street_Address_Line1 + \",\" + item.Recipient_City + \",\" + item.Recipient_State + \",\" + item.Recipient_Zip_Code + \",\" + item.Recipient_Country;\n            address = address.replace(/\\s/g, '');\n            var obj = {\n              'value': full_name,\n              'label': full_name,\n              'address': address,\n              'id': i\n            };\n            physician_names.push(obj);\n          }\n        });\n        options = physician_names;\n\n        _this3.setState({\n          isLoaded: true,\n          response: json,\n          autocompleteSuggestion: physician_names\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          selectedOption = _this$state.selectedOption,\n          isLoaded = _this$state.isLoaded,\n          response = _this$state.response,\n          lat = _this$state.lat,\n          long = _this$state.long;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        })));\n      } else return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Map, {\n        google: this.props.google,\n        zoom: 14,\n        center: {\n          lat: lat,\n          lng: long\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        name: 'Current location',\n        position: {\n          lat: lat,\n          lng: long\n        },\n        defaultAnimation: this.props.google.maps.Animation.DROP,\n        icon: {\n          url: \"https://cdn.dribbble.com/users/1401331/screenshots/4113224/5.png\",\n          anchor: new this.props.google.maps.Point(32, 32),\n          scaledSize: new this.props.google.maps.Size(64, 64)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"contact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \" Locate physician \"), React.createElement(Select, {\n        value: selectedOption,\n        onChange: this.handleChange,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        name: \"submit\",\n        type: \"submit\",\n        id: \"contact-submit\",\n        onClick: this.locatePhy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \" Find location \"))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDMQNXNqvLcdx4rEhOsSX5YCRyzCUAuDaI\"\n})(App);","map":{"version":3,"sources":["/Users/dawithunegnaw/Desktop/tst_grd/locate_phy/locate_phyisician_three/client/src/App.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","Select","axios","options","App","props","handleChange","selectedOption","getCoordinate","address","setState","state","isLoaded","autocompleteSuggestion","lat","long","idx","url","get","then","res","data","results","geometry","location","undefined","console","log","lng","fetch","json","physician_names","map","item","i","Physician_First_Name","full_name","Physician_Middle_Name","Physician_Last_Name","Recipient_Primary_Business_Street_Address_Line1","Recipient_City","Recipient_State","Recipient_Zip_Code","Recipient_Country","replace","obj","push","response","logo","google","onMarkerClick","maps","Animation","DROP","anchor","Point","scaledSize","Size","locatePhy","apiKey"],"mappings":"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","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n    Map,\n    InfoWindow,\n    Marker,\n    GoogleApiWrapper\n} from 'google-maps-react';\nimport Select from 'react-select';\nimport axios from 'axios';\n\n\n\nlet options = [];\n\nclass App extends Component {\n\n\n    constructor(props) {\n        super();\n        this.state = {\n            selectedOption: null,\n            isLoaded: false,\n            autocompleteSuggestion: [],\n            lat: 48.407326,\n            long: -123.329773,\n            idx: 0\n        }\n\n    }\n\n\n\n    getCoordinate(address) {\n\n        let url = 'https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyDMQNXNqvLcdx4rEhOsSX5YCRyzCUAuDaI&address=' + address\n\n\n\n        axios.get(url)\n            .then(res => {\n\n\n                if (res.data.results[0].geometry.location.lat != undefined) {\n\n                    console.log(address)\n                    console.log(res.data.results[0].geometry.location.lat)\n                    console.log(res.data.results[0].geometry.location.lng)\n                    this.setState({\n                        lat: res.data.results[0].geometry.location.lat,\n                        long: res.data.results[0].geometry.location.lng,\n                    })\n\n\n                }\n\n            })\n\n\n    }\n\n    componentDidMount() {\n\n        fetch('/api/')\n            .then(res => res.json())\n            .then(json => {\n                var physician_names = []\n\n                json.map(function(item, i) {\n                    if (item.Physician_First_Name != \"Physician_First_Name\") {\n                        let full_name = item.Physician_First_Name + \" \" + item.Physician_Middle_Name + \" \" + item.Physician_Last_Name\n                        let address = item.Recipient_Primary_Business_Street_Address_Line1 + \",\" + item.Recipient_City + \",\" + item.Recipient_State + \",\" + item.Recipient_Zip_Code + \",\" + item.Recipient_Country\n\n                        address = address.replace(/\\s/g, '');\n\n                        let obj = {\n                            'value': full_name,\n                            'label': full_name,\n                            'address': address,\n                            'id': i\n                        }\n                        physician_names.push(obj)\n                    }\n                })\n                options = physician_names\n\n\n                this.setState({\n                    isLoaded: true,\n                    response: json,\n                    autocompleteSuggestion: physician_names,\n                })\n            })\n\n    }\n\n\n    handleChange = (selectedOption) => {\n        this.getCoordinate(selectedOption.address)\n        this.setState({\n            selectedOption\n        });\n        //console.log(`Option selected:`, selectedOption);\n    }\n    render() {\n        const {\n            selectedOption,\n            isLoaded,\n            response,\n            lat,\n            long\n        } = this.state;\n\n\n        if (!isLoaded) {\n            return ( \n                <div className = \"App\" >\n                \n                <header className = \"App-header\" >\n                \n                <img src = {\n                    logo\n                }\n                className = \"App-logo\"\n                alt = \"logo\" / >\n\n                \n                </header>\n\n                \n                </div>\n\n            )\n        } else\n            return (\n\n                \n                <div>\n\n\n                \n                <Map google = {\n                    this.props.google\n                }\n                zoom = {\n                    14\n                }\n                center = {\n                    {\n                        lat: lat,\n                        lng: long\n                    }\n                }\n\n                >\n\n                \n                <Marker onClick = {\n                    this.onMarkerClick\n                }\n                name = {\n                    'Current location'\n                }\n                position = {\n                    {\n                        lat: lat,\n                        lng: long\n                    }\n                }\n\n                defaultAnimation = {\n                    this.props.google.maps.Animation.DROP\n                }\n                icon = {\n                    {\n                        url: \"https://cdn.dribbble.com/users/1401331/screenshots/4113224/5.png\",\n                        anchor: new this.props.google.maps.Point(32, 32),\n                        scaledSize: new this.props.google.maps.Size(64, 64)\n                    }\n                }\n\n                />\n\n\n\n                \n                </Map>\n\n                \n                <div className = \"container\" >\n                \n                <div id = \"contact\" >\n                \n                <h3 > Locate physician < /h3>\n\n                \n                <Select value = {\n                    selectedOption\n                }\n                onChange = {\n                    this.handleChange\n                }\n                options = {\n                    options\n                }\n\n                />\n\n\n\n                \n                <button name = \"submit\"\n                type = \"submit\"\n                id = \"contact-submit\"\n                onClick = {\n                    this.locatePhy\n                } > Find location < /button>\n\n                \n                </div> \n                </div>\n\n                \n                </div>\n\n\n            )\n\n\n    }\n\n\n}\n\n\n\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyDMQNXNqvLcdx4rEhOsSX5YCRyzCUAuDaI\")\n})(App)"]},"metadata":{},"sourceType":"module"}